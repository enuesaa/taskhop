// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type GraphQLClient interface {
	GetHealth(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetHealth, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) GraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type GetHealth_GetHealth struct {
	Ok   bool   "json:\"ok\" graphql:\"ok\""
	Code string "json:\"code\" graphql:\"code\""
}

func (t *GetHealth_GetHealth) GetOk() bool {
	if t == nil {
		t = &GetHealth_GetHealth{}
	}
	return t.Ok
}
func (t *GetHealth_GetHealth) GetCode() string {
	if t == nil {
		t = &GetHealth_GetHealth{}
	}
	return t.Code
}

type GetHealth struct {
	GetHealth GetHealth_GetHealth "json:\"getHealth\" graphql:\"getHealth\""
}

func (t *GetHealth) GetGetHealth() *GetHealth_GetHealth {
	if t == nil {
		t = &GetHealth{}
	}
	return &t.GetHealth
}

const GetHealthDocument = `query getHealth {
	getHealth {
		ok
		code
	}
}
`

func (c *Client) GetHealth(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetHealth, error) {
	vars := map[string]any{}

	var res GetHealth
	if err := c.Client.Post(ctx, "getHealth", GetHealthDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetHealthDocument: "getHealth",
}
