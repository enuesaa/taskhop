// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination repository_mock.go -package archivefx
//

// Package archivefx is a generated GoMock package.
package archivefx

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
	isgomock struct{}
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepository) Create(path string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", path, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryMockRecorder) Create(path, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), path, body)
}

// CreateDir mocks base method.
func (m *MockIRepository) CreateDir(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDir", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDir indicates an expected call of CreateDir.
func (mr *MockIRepositoryMockRecorder) CreateDir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDir", reflect.TypeOf((*MockIRepository)(nil).CreateDir), path)
}

// HomeDir mocks base method.
func (m *MockIRepository) HomeDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HomeDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HomeDir indicates an expected call of HomeDir.
func (mr *MockIRepositoryMockRecorder) HomeDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HomeDir", reflect.TypeOf((*MockIRepository)(nil).HomeDir))
}

// IsDir mocks base method.
func (m *MockIRepository) IsDir(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDir", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDir indicates an expected call of IsDir.
func (mr *MockIRepositoryMockRecorder) IsDir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDir", reflect.TypeOf((*MockIRepository)(nil).IsDir), path)
}

// IsExist mocks base method.
func (m *MockIRepository) IsExist(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockIRepositoryMockRecorder) IsExist(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockIRepository)(nil).IsExist), path)
}

// ListDirs mocks base method.
func (m *MockIRepository) ListDirs(path string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDirs", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDirs indicates an expected call of ListDirs.
func (mr *MockIRepositoryMockRecorder) ListDirs(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDirs", reflect.TypeOf((*MockIRepository)(nil).ListDirs), path)
}

// ListFiles mocks base method.
func (m *MockIRepository) ListFiles(path string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockIRepositoryMockRecorder) ListFiles(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockIRepository)(nil).ListFiles), path)
}

// Read mocks base method.
func (m *MockIRepository) Read(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIRepositoryMockRecorder) Read(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIRepository)(nil).Read), path)
}

// Remove mocks base method.
func (m *MockIRepository) Remove(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockIRepositoryMockRecorder) Remove(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIRepository)(nil).Remove), path)
}

// WorkDir mocks base method.
func (m *MockIRepository) WorkDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkDir indicates an expected call of WorkDir.
func (mr *MockIRepositoryMockRecorder) WorkDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkDir", reflect.TypeOf((*MockIRepository)(nil).WorkDir))
}
