// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -source=main.go -destination mock.go -package repository
//

// Package repository is a generated GoMock package.
package repository

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockI is a mock of I interface.
type MockI struct {
	ctrl     *gomock.Controller
	recorder *MockIMockRecorder
	isgomock struct{}
}

// MockIMockRecorder is the mock recorder for MockI.
type MockIMockRecorder struct {
	mock *MockI
}

// NewMockI creates a new mock instance.
func NewMockI(ctrl *gomock.Controller) *MockI {
	mock := &MockI{ctrl: ctrl}
	mock.recorder = &MockIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockI) EXPECT() *MockIMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockI) Read(path string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", path)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIMockRecorder) Read(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockI)(nil).Read), path)
}
