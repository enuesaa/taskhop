// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/enuesaa/taskhop/commander/gql/model"
)

type GraphQLClient interface {
	GetHealth(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetHealth, error)
	GetTask(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetTask, error)
	Register(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*Register, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) GraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type GetHealth_Health struct {
	Ok bool "json:\"ok\" graphql:\"ok\""
}

func (t *GetHealth_Health) GetOk() bool {
	if t == nil {
		t = &GetHealth_Health{}
	}
	return t.Ok
}

type GetTask_Task struct {
	Status model.TaskStatus "json:\"status\" graphql:\"status\""
	Cmds   []string         "json:\"cmds\" graphql:\"cmds\""
}

func (t *GetTask_Task) GetStatus() *model.TaskStatus {
	if t == nil {
		t = &GetTask_Task{}
	}
	return &t.Status
}
func (t *GetTask_Task) GetCmds() []string {
	if t == nil {
		t = &GetTask_Task{}
	}
	return t.Cmds
}

type GetHealth struct {
	Health GetHealth_Health "json:\"health\" graphql:\"health\""
}

func (t *GetHealth) GetHealth() *GetHealth_Health {
	if t == nil {
		t = &GetHealth{}
	}
	return &t.Health
}

type GetTask struct {
	Task GetTask_Task "json:\"task\" graphql:\"task\""
}

func (t *GetTask) GetTask() *GetTask_Task {
	if t == nil {
		t = &GetTask{}
	}
	return &t.Task
}

type Register struct {
	Register bool "json:\"register\" graphql:\"register\""
}

func (t *Register) GetRegister() bool {
	if t == nil {
		t = &Register{}
	}
	return t.Register
}

const GetHealthDocument = `query getHealth {
	health {
		ok
	}
}
`

func (c *Client) GetHealth(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetHealth, error) {
	vars := map[string]any{}

	var res GetHealth
	if err := c.Client.Post(ctx, "getHealth", GetHealthDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTaskDocument = `query getTask {
	task {
		status
		cmds
	}
}
`

func (c *Client) GetTask(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetTask, error) {
	vars := map[string]any{}

	var res GetTask
	if err := c.Client.Post(ctx, "getTask", GetTaskDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const RegisterDocument = `mutation register {
	register
}
`

func (c *Client) Register(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*Register, error) {
	vars := map[string]any{}

	var res Register
	if err := c.Client.Post(ctx, "register", RegisterDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetHealthDocument: "getHealth",
	GetTaskDocument:   "getTask",
	RegisterDocument:  "register",
}
